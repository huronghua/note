1、BeanFactory 和 FactoryBean？
BeanFactory： 容器的基本接口，是一个工厂，用来生产 Bean
FactoryBean： 是一个特殊的 Bean，可以当作工厂使用的 Bean，具体实现如下：
public interface FactoryBean {
Object getObject() throws Exception; 
Class getObjectType();
boolean isSingleton();
}


2.Spring IOC 的理解，其初始化过程？
之前都是在需要的时候直接自己生成一个需要的对象，现在交给ioc管理，你需要的时候，就会由委托对象自动注入返回给你需要的东西，不需要自己去获取。可以将业务与依赖对象解耦
（1）.构造方法注入：在构造方法中申明需要的依赖对象的列表（注入的对象的生命周期是由spring ioc管理的），因为是在构造方法中，所以立即就可以使用
（2）.setter方法注入：外界通过调用set方法来注入这个类所需要的依赖类到这个类的某些属性中，必须手动调用一下各种属性的set方法才能够投入使用
（3）.接口注入（强行实现一个接口，并且声明接口方法的参数为需要注入的类，不怎么使用）
初始化过程：
bean的实例化：通过反射或者cglib动态初始化对应的bean实例，并且对bean进行包装，返回一个beanwrapper实例，用于获取获取对象的信息和属性值，设置相关依赖和属性
检查是否实现了aware接口：设置完bean的相关属性和依赖关系之后，会根据是否有aware接口补充设置bean对象的附加属性
beanpostprocessor：可以通过其为bean实例做更多的处理，比如生成代理对象和替换当前对象实例等
initializingbean和init-method：initializingBean的afterProper-tiesSet方法调整对象实例的状态（比如让业务对象实现该接口，在初始化时设置该对象的状态为不可用），该方法比较有侵入性。init-method：自定义初始化操作可以以任何方式命名。一般不会使用。
disposableBean和destroy-method：为对象提供了销毁逻辑，比如关闭数据库连接池。


3.BeanFactory 和 ApplicationContext？
这是spring的两种IoC容器：
BeanFactory：默认使用延迟加载，只有在需要时才会进行初始化和依赖注入等操作，所以启动速度快，资源占用少
ApplicationContext：提供更加丰富的功能，在一开始就全部初始化并且注入完毕，继承自BeanFactory，


4、Spring Bean 的生命周期，如何被管理的？
1. 实例化一个Bean，也就是我们通常说的new
2. 按照Spring上下文对实例化的Bean进行配置，也就是IOC注入
3. 如果这个Bean实现了BeanNameAware接口，会调用它实现的setBeanName(String beanId)方法，此处传递的是Spring配置文件中Bean的ID
4. 如果这个Bean实现了BeanFactoryAware接口，会调用它实现的setBeanFactory()，传递的是Spring工厂本身（可以用这个方法获取到其他Bean）
5. 如果这个Bean实现了ApplicationContextAware接口，会调用setApplicationContext(ApplicationContext)方法，传入Spring上下文，该方式同样可以实现步骤4，但比4更好，以为ApplicationContext是BeanFactory的子接口，有更多的实现方法
6. 如果这个Bean关联了BeanPostProcessor接口，将会调用postProcessBeforeInitialization(Object obj, String s)方法，BeanPostProcessor经常被用作是Bean内容的更改，并且由于这个是在Bean初始化结束时调用After方法，也可用于内存或缓存技术
7. 如果这个Bean在Spring配置文件中配置了init-method属性会自动调用其配置的初始化方法
8. 如果这个Bean关联了BeanPostProcessor接口，将会调用postAfterInitialization(Object obj, String s)方法注意：以上工作完成以后就可以用这个Bean了，那这个Bean是一个single的，所以一般情况下我们调用同一个ID的Bean会是在内容地址相同的实例
9. 当Bean不再需要时，会经过清理阶段，如果Bean实现了DisposableBean接口，会调用其实现的destroy方法
10. 最后，如果这个Bean的Spring配置中配置了destroy-method属性，会自动调用其配置的销毁方法
以上10步骤可以作为面试或者笔试的模板，另外我们这里描述的是应用Spring上下文Bean的生命周期，如果应用Spring的工厂也就是BeanFactory的话去掉第5步就Ok了

5、Spring Bean 的加载过程是怎样的？
1.转换BeanName   transformedBeanName(name)
2.加载单例检查缓存中是否存在该Bean的单例  getSingleton(beanName)
3.Bean创建  createBeanInstance
4.属性注入   populateBean
5.初始化Bean  initializeBean

7.如果要你实现Spring IOC，你会注意哪些问题？
Bean的销毁及内存GC

8、Spring 是如何管理事务的，事务管理机制？
编程式事务：1.platformTransactionManager手动在代码中编写  transactionDefinition注入transactionStatus，transactionManager调用rollback（transactionStatus）
			2.transactionTemplate 使用对应的两个callback接口在补获的checkedException异常中抛出runtime异常或者使用transactionStatus设置rollbackonly标志
			
声明式事务：xml配置、注解配置

9、Spring 的不同事务传播行为有哪些，干什么用的？
场景：serviceA里面的方法A调用serviceB中的方法B
分类：require（默认值，有则执行，无则创建）,require_new,supports,not_supported,mandatory(强制执行A),never（强制不执行事务）,nested（嵌套事务）
作用：Spring 的事务传播行为就是解决方法之间的事务传播的。

10、Spring 中用到了那些设计模式？
单例模式  工厂模式（创建实例化bean）

11、Spring MVC 的工作原理？
https://img-blog.csdn.net/20171105190028224?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvemprQzA1MDgxOA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center
1.用户发送请求至前端控制器DispatcherServlet
2.DispatcherServlet收到请求调用HandlerMapping处理器映射器。
3.处理器映射器根据请求url找到具体的处理器，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet。
4.DispatcherServlet通过HandlerAdapter处理器适配器调用处理器
5.执行处理器(Controller，也叫后端控制器)。
6.Controller执行完成返回ModelAndView
7.HandlerAdapter将controller执行结果ModelAndView返回给DispatcherServlet
8.DispatcherServlet将ModelAndView传给ViewReslover视图解析器
9.ViewReslover解析后返回具体View
10.DispatcherServlet对View进行渲染视图（即将模型数据填充至视图中）。
11.DispatcherServlet响应用户


14、Spring 如何保证 Controller 并发的安全？
Spring 多线程请求过来调用的Controller对象都是一个，而不是一个请求过来就创建一个Controller对象。原因就在于Controller对象是单例，应该避免在controller中定义变量，那么如果不小心在类中定义了类变量，那么这个类变量是被所有请求共享的，这可能会造成多个请求修改该变量的值，有两种办法（1）每次都创建，只需要在类上添加注解@Scope("prototype")即可 （2）使用threadlocal保存类变量